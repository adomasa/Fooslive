## GameActivity

# Determines the speed of event slider in milliseconds
slider_delay = 120
# An integer, defining when we should start formatting the speed in a different way
format_speed = 10

# The default width of the camera preview
width_camera = 1280
# The default height of the camera preview
height_camera = 720

# The variables below define the resolution we make our calculations in
# We do so in order to make the user experience smoother

# Defines the width of the resolution used for calculations
width_preview = 400
# Defines the height of the resolution used for calculations
height_preview = 225


## Vibration
# The pattern of alternating on-off timings, starting with off. Timing values of 0 will cause the
# timing / amplitude pair to be ignored.
vibration_pattern_timing0 = 100
vibration_pattern_timing1 = 1000
# The index into the timings array at which to repeat, or -1 if you you don't want to repeat.
vibration_repeat_index = 2

## Sensors
# Allowed pitch offset to handle imprecise data better
offset_pitch = 2
# Allowed roll offset to handle imprecise data better
offset_roll = 2
# Minimum allowed pitch value which doesn't trigger alert
min_pitch = 35
# Maximum allowed pitch value which doesn't trigger alert
max_pitch = 50
# Allowed roll deviation for both sides which doesn't trigger alert
max_roll_deviation = 4

## GameController

# Defines how many last positions we hold in memory
ball_coords_memory = 100
# Defines the number of frames the ball has to be lost in order to count as a goal
goal_frames_offset = 20
# Defines the percentage of the top and bottom of the display to be reserved for the goal zone
# (here 0.3 stands for 30%)
goal_zone_size = 0.3

## ColorDetector

# Defines the default color filtering threshold, which is used to find the ball in a given frame
default_threshold = 35

# Our tracking algorithm uses a bounding box, which defines a viewport of a frame, in which we
#search for the ball
# Defines the starting width of the bounding box
start_box_width = 40
# Defines the starting height of the bounding box
start_box_height = 40

# How many frames the ball has to be lost in order to reset the bounding box
ball_lost_frames_count = 40

# The minimum size of the blob in pixels, in order for it to be considered the ball
min_blob_size = 10

# The bounding box can change in size, depending on the speed of the ball
# The bounding box width is calculated based on the following formula:
# Width = speed_x * mul_delta_x + blob_width * mul_delta_width
mul_delta_x = 5
mul_delta_width = 3

# The bounding box height is calculated in a similar way:
# Height = speed_y * mul_delta_y + blob_height * mul_delta_height
mul_delta_y = 5
mul_delta_height = 3

# The minimum size of the bounding box. Because we use the blob's size as a base for our bounding
# box calculations, we have to avoid very small values. The variables below define the absolute
# minimum size of the bounding box
min_width = 30
min_height = 30

## Foosball table template drawing
# Defines the multipliers for the foosball template
stroke_template = 4
mul_bottom_left_x = 0.25
mul_bottom_right_x = 0.75
mul_bottom_y = 0.9209
mul_upper_bottom_left_x = 0.03
mul_upper_bottom_right_x = 0.97
mul_upper_bottom_y = 0.8023
mul_lower_top_left_x = 0.20
mul_lower_top_right_x = 0.80
mul_lower_top_y = 0.35
mul_top_left_x = 0.42
mul_top_right_x = 0.58
mul_top_y = 0.2994

## Foosball table template drawing

## RowChecker

# These constants were used to calculate the individual row zones of the foosmen. For now, they're
# not used
row_one = 0.1158
row_two = 0.0623
row_three = 0.0865
row_four = 0.1005
row_five = 0.1145
row_six = 0.1348
row_seven = 0.1832
row_eight = 0.2124
percent_video = 0.1250

## Misc

# We base our speed calculations on the real size of the foosball table
# Defines the real width of the foosball table in meters
width_real = 1.4224
# Defines the real height of the foosball table in meters
height_real = 0.7620
# Defines the number of zones from the center we collect the color from when the user initially
# selects the ball
color_zone_count = 1

## Ball trace effect

# We use the alpha color channel to make the trace fade to create a nice effect
# The following formula is used to calculate the alpha value for individual points:
# Alpha = trace_max_alpha * ( n / trace_divisor ) + trace_to_add
# here n is the number of the point, going from n = 10 to n = 1

# Defines the starting alpha value for the ball trace
trace_max_alpha = 200
# Defines the divisor for the starting alpha value.
trace_divisor = 10
# Defines how much we add to the equation
trace_to_add = 50

## Object detector

# Defines the width of the stroke for the ball. Currently unused
stroke_ball = 5
# Defines the width of the stroke for the bounding box rectangle ( currently used for the ball
# trace as well )
stroke_rect = 16

## HeatmapDrawing

# The heatmap can consist of a lot of individual zones. Here, the variables directly affect it's
# size.
# Count = zones_width * zones_height

# Defines the count of the zones in the x axis
zones_width = 60
# Defines the count of the zones in the y axis
zones_height = 60

# Defines the alpha value for each of the heatmap zone's color. Should be renamed
max_trail_alpha = 255

# The following constants are unused and should be removed
max_hue = 255
max_saturation = 180
max_value = 0

# Defines the number of iterations the heatmap goes through before it is represented on screen
blur_iterations = 11